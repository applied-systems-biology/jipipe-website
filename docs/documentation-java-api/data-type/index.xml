<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Creating a data type on JIPipe for ImageJ</title>
    <link>https://applied-systems-biology.github.io/jipipe/documentation-java-api/data-type/</link>
    <description>Recent content in Creating a data type on JIPipe for ImageJ</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://applied-systems-biology.github.io/jipipe/documentation-java-api/data-type/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Result view</title>
      <link>https://applied-systems-biology.github.io/jipipe/documentation-java-api/data-type/result-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://applied-systems-biology.github.io/jipipe/documentation-java-api/data-type/result-ui/</guid>
      <description>After processing, users should be able to continue processing the data from within JIPipe. The data instances are cleared from memory after processing, meaning that the data needs to be loaded from its output folder after processing.
An user interface is shown when a user select a row in the results table. This UI can be replaced with a custom one that is designed to handle this specific data type.</description>
    </item>
    
    <item>
      <title>Table cell view</title>
      <link>https://applied-systems-biology.github.io/jipipe/documentation-java-api/data-type/cell-ui/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://applied-systems-biology.github.io/jipipe/documentation-java-api/data-type/cell-ui/</guid>
      <description>For some data types, it is more convenient to display a short summary or the whole data directly within the corresponding cell in result data slot table.
To create such a cell renderer, inherit from JIPipeResultDataSlotCellUI
public class MyDataSlotCellUI extends JIPipeResultDataSlotCellUI { public MyDataSlotCellUI() { setOpaque(true); setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4)); } // This is very similar as in MyDataDataSlotRowUI  private Path findJsonFile(JIPipeDataSlot slot, JIPipeExportedDataTable.Row row) { if (JIPipeResultDataSlotCellUI.getRowStorageFolder(slot, row) !</description>
    </item>
    
  </channel>
</rss>